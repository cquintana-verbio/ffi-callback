/* automatically generated by rust-bindgen 0.55.1 */

#![allow(clippy::just_underscores_and_digits, clippy::unreadable_literal, clippy::missing_safety_doc, clippy::useless_transmute, clippy::redundant_static_lifetimes, improper_ctypes, dead_code)]

pub type OnAccumulated = ::core::option::Option<
    unsafe extern "C" fn(accumulated: ::std::os::raw::c_int, data: *mut ::core::ffi::c_void),
>;
pub type OnLimitReached =
    ::core::option::Option<unsafe extern "C" fn(data: *mut ::core::ffi::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Accumulator {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AccumulatorCallback {
    _unused: [u8; 0],
}
extern "C" {
    pub fn createCallback(userData: *mut ::core::ffi::c_void) -> *mut AccumulatorCallback;
}
extern "C" {
    pub fn registerAccumulatedCallback(
        callback: *mut AccumulatorCallback,
        onAccumulated: OnAccumulated,
    );
}
extern "C" {
    pub fn registerLimitCallback(
        callback: *mut AccumulatorCallback,
        onLimitReached: OnLimitReached,
    );
}
extern "C" {
    pub fn createAccumulator() -> *mut Accumulator;
}
extern "C" {
    pub fn setMaxAccumulated(accumulator: *mut Accumulator, maxAccumulated: ::std::os::raw::c_int);
}
extern "C" {
    pub fn setLimit(accumulator: *mut Accumulator, limit: ::std::os::raw::c_int);
}
extern "C" {
    pub fn setCallback(accumulator: *mut Accumulator, callback: *mut AccumulatorCallback);
}
extern "C" {
    pub fn accumulate(accumulator: *mut Accumulator, number: ::std::os::raw::c_int);
}
extern "C" {
    pub fn freeCallback(callback: *mut AccumulatorCallback);
}
extern "C" {
    pub fn freeAccumulator(accumulator: *mut Accumulator);
}
